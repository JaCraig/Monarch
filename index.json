{
  "api/Microsoft.Extensions.DependencyInjection.MonarchCanisterExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.MonarchCanisterExtensions.html",
    "title": "Class MonarchCanisterExtensions | Monarch API Reference",
    "keywords": "Class MonarchCanisterExtensions Namespace Microsoft.Extensions.DependencyInjection Assembly Monarch.dll Canister extensions public static class MonarchCanisterExtensions Inheritance object MonarchCanisterExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterMonarch(ICanisterConfiguration?) Registers monarch with Canister. public static ICanisterConfiguration? RegisterMonarch(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Monarch API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes MonarchCanisterExtensions Canister extensions"
  },
  "api/Monarch.CanisterModules.MonarchModule.html": {
    "href": "api/Monarch.CanisterModules.MonarchModule.html",
    "title": "Class MonarchModule | Monarch API Reference",
    "keywords": "Class MonarchModule Namespace Monarch.CanisterModules Assembly Monarch.dll Monarch module public class MonarchModule : IModule Inheritance object MonarchModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Order to run this in public int Order { get; } Property Value int Monarch module Methods Load(IServiceCollection?) Loads the module using the bootstrapper public void Load(IServiceCollection? bootstrapper) Parameters bootstrapper IServiceCollection The bootstrapper. See Also IModule"
  },
  "api/Monarch.CanisterModules.html": {
    "href": "api/Monarch.CanisterModules.html",
    "title": "Namespace Monarch.CanisterModules | Monarch API Reference",
    "keywords": "Namespace Monarch.CanisterModules Classes MonarchModule Monarch module"
  },
  "api/Monarch.CommandRunner.html": {
    "href": "api/Monarch.CommandRunner.html",
    "title": "Class CommandRunner | Monarch API Reference",
    "keywords": "Class CommandRunner Namespace Monarch Assembly Monarch.dll Command runner public class CommandRunner Inheritance object CommandRunner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandRunner() Initializes a new instance of the CommandRunner class. public CommandRunner() CommandRunner(CommandManager?) Initializes a new instance of the CommandRunner class. public CommandRunner(CommandManager? manager) Parameters manager CommandManager The manager. Properties Manager Gets the manager. public CommandManager? Manager { get; } Property Value CommandManager The manager. Methods Run(string[]) Runs the specified arguments. public Task<int> Run(string[] args) Parameters args string[] The arguments. Returns Task<int> The result."
  },
  "api/Monarch.Commands.Attributes.DynamicDisplayAttribute.html": {
    "href": "api/Monarch.Commands.Attributes.DynamicDisplayAttribute.html",
    "title": "Class DynamicDisplayAttribute | Monarch API Reference",
    "keywords": "Class DynamicDisplayAttribute Namespace Monarch.Commands.Attributes Assembly Monarch.dll Dynamic display attribute [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public sealed class DynamicDisplayAttribute : Attribute Inheritance object Attribute DynamicDisplayAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DynamicDisplayAttribute(Type) Initializes a new instance of the DynamicDisplayAttribute class. public DynamicDisplayAttribute(Type descriptionType) Parameters descriptionType Type Type of the description. Properties DescriptionType Gets the type of the description. public Type DescriptionType { get; } Property Value Type The type of the description. Methods GetDescription() Gets the description. public string GetDescription() Returns string The description. See Also Attribute"
  },
  "api/Monarch.Commands.Attributes.html": {
    "href": "api/Monarch.Commands.Attributes.html",
    "title": "Namespace Monarch.Commands.Attributes | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands.Attributes Classes DynamicDisplayAttribute Dynamic display attribute"
  },
  "api/Monarch.Commands.BaseClasses.CommandBaseClass-1.html": {
    "href": "api/Monarch.Commands.BaseClasses.CommandBaseClass-1.html",
    "title": "Class CommandBaseClass<TInput> | Monarch API Reference",
    "keywords": "Class CommandBaseClass<TInput> Namespace Monarch.Commands.BaseClasses Assembly Monarch.dll Command base class public abstract class CommandBaseClass<TInput> : ICommand<TInput>, ICommand where TInput : class, new() Type Parameters TInput The type of the input. Inheritance object CommandBaseClass<TInput> Implements ICommand<TInput> ICommand Derived HelpCommand VersionCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandBaseClass() Initializes a new instance of the CommandBaseClass<TInput> class. protected CommandBaseClass() Properties Aliases Gets the aliases. public abstract string[] Aliases { get; } Property Value string[] The aliases. Description Gets the description. public abstract string Description { get; } Property Value string The description. Name Gets the name. public abstract string Name { get; } Property Value string The name. Methods CanRun(string) Determines whether this instance can run the specified argument. public bool CanRun(string arg) Parameters arg string The argument. Returns bool true if this instance can run the specified argument; otherwise, false. CreateInput() Creates the input. public object CreateInput() Returns object Run(object) Runs the specified input. public Task<int> Run(object input) Parameters input object The input. Returns Task<int> The result. Run(TInput) Runs the specified input. protected abstract Task<int> Run(TInput input) Parameters input TInput The input. Returns Task<int> The result. See Also ICommand<TInput>"
  },
  "api/Monarch.Commands.BaseClasses.html": {
    "href": "api/Monarch.Commands.BaseClasses.html",
    "title": "Namespace Monarch.Commands.BaseClasses | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands.BaseClasses Classes CommandBaseClass<TInput> Command base class"
  },
  "api/Monarch.Commands.CommandManager.html": {
    "href": "api/Monarch.Commands.CommandManager.html",
    "title": "Class CommandManager | Monarch API Reference",
    "keywords": "Class CommandManager Namespace Monarch.Commands Assembly Monarch.dll Manager class. public class CommandManager Inheritance object CommandManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandManager(IEnumerable<ICommand>, IEnumerable<IOptions>, IEnumerable<IArgLexer>, IEnumerable<IArgParser>) Initializes a new instance of the CommandManager class. public CommandManager(IEnumerable<ICommand> commands, IEnumerable<IOptions> options, IEnumerable<IArgLexer> lexer, IEnumerable<IArgParser> parser) Parameters commands IEnumerable<ICommand> The commands. options IEnumerable<IOptions> The options. lexer IEnumerable<IArgLexer> The lexer. parser IEnumerable<IArgParser> The parser. Properties Commands Gets the commands. public IEnumerable<ICommand> Commands { get; } Property Value IEnumerable<ICommand> The commands. Lexer Gets the lexer. public IArgLexer Lexer { get; } Property Value IArgLexer The lexer. Options Gets the options. public IOptions Options { get; } Property Value IOptions The options. Parser Gets the parser. public IArgParser Parser { get; } Property Value IArgParser The parser. Methods GetCommand(string[]) Gets the command. public ICommand GetCommand(string[] args) Parameters args string[] The arguments. Returns ICommand The command specified by the arguments. GetInput(ICommand, string[]) Gets the input based on the args passed in. public object GetInput(ICommand command, string[] args) Parameters command ICommand The command. args string[] The arguments. Returns object The resulting command input."
  },
  "api/Monarch.Commands.Default.EmptyInput.html": {
    "href": "api/Monarch.Commands.Default.EmptyInput.html",
    "title": "Class EmptyInput | Monarch API Reference",
    "keywords": "Class EmptyInput Namespace Monarch.Commands.Default Assembly Monarch.dll Empty input public class EmptyInput Inheritance object EmptyInput Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Monarch.Commands.Default.HelpCommand.html": {
    "href": "api/Monarch.Commands.Default.HelpCommand.html",
    "title": "Class HelpCommand | Monarch API Reference",
    "keywords": "Class HelpCommand Namespace Monarch.Commands.Default Assembly Monarch.dll Help command public class HelpCommand : CommandBaseClass<HelpInput>, ICommand<HelpInput>, ICommand Inheritance object CommandBaseClass<HelpInput> HelpCommand Implements ICommand<HelpInput> ICommand Inherited Members CommandBaseClass<HelpInput>.CanRun(string) CommandBaseClass<HelpInput>.CreateInput() CommandBaseClass<HelpInput>.Run(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HelpCommand(IEnumerable<IConsoleWriter>, IEnumerable<IOptions>) Initializes a new instance of the HelpCommand class. public HelpCommand(IEnumerable<IConsoleWriter> console, IEnumerable<IOptions> options) Parameters console IEnumerable<IConsoleWriter> The console. options IEnumerable<IOptions> The options. Properties Aliases Gets the aliases. public override string[] Aliases { get; } Property Value string[] The aliases. Console Gets the console. public IConsoleWriter Console { get; } Property Value IConsoleWriter The console. Description Gets the description. public override string Description { get; } Property Value string The description. Name Gets the name. public override string Name { get; } Property Value string The name. Options Gets the options. public IOptions Options { get; } Property Value IOptions The options. Methods Run(HelpInput) Runs the specified input. protected override Task<int> Run(HelpInput input) Parameters input HelpInput The input. Returns Task<int> The result. See Also CommandBaseClass<TInput>"
  },
  "api/Monarch.Commands.Default.HelpInput.html": {
    "href": "api/Monarch.Commands.Default.HelpInput.html",
    "title": "Class HelpInput | Monarch API Reference",
    "keywords": "Class HelpInput Namespace Monarch.Commands.Default Assembly Monarch.dll Help input public class HelpInput Inheritance object HelpInput Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Command Gets or sets the command to get help on. [Display(Description = \"The command that you wish to have information about.\")] public string? Command { get; set; } Property Value string The command to get help on."
  },
  "api/Monarch.Commands.Default.VersionCommand.html": {
    "href": "api/Monarch.Commands.Default.VersionCommand.html",
    "title": "Class VersionCommand | Monarch API Reference",
    "keywords": "Class VersionCommand Namespace Monarch.Commands.Default Assembly Monarch.dll Version command public class VersionCommand : CommandBaseClass<EmptyInput>, ICommand<EmptyInput>, ICommand Inheritance object CommandBaseClass<EmptyInput> VersionCommand Implements ICommand<EmptyInput> ICommand Inherited Members CommandBaseClass<EmptyInput>.CanRun(string) CommandBaseClass<EmptyInput>.CreateInput() CommandBaseClass<EmptyInput>.Run(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VersionCommand(IEnumerable<IConsoleWriter>, IEnumerable<IOptions>) Initializes a new instance of the VersionCommand class. public VersionCommand(IEnumerable<IConsoleWriter> console, IEnumerable<IOptions> options) Parameters console IEnumerable<IConsoleWriter> The console. options IEnumerable<IOptions> The options. Properties Aliases Gets the aliases. public override string[] Aliases { get; } Property Value string[] The aliases. Console Gets the console. public IConsoleWriter Console { get; } Property Value IConsoleWriter The console. Description Gets the description. public override string Description { get; } Property Value string The description. Name Gets the name. public override string Name { get; } Property Value string The name. Methods Run(EmptyInput) Runs the specified input. protected override Task<int> Run(EmptyInput input) Parameters input EmptyInput The input. Returns Task<int> The result. See Also CommandBaseClass<TInput>"
  },
  "api/Monarch.Commands.Default.html": {
    "href": "api/Monarch.Commands.Default.html",
    "title": "Namespace Monarch.Commands.Default | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands.Default Classes EmptyInput Empty input HelpCommand Help command HelpInput Help input VersionCommand Version command"
  },
  "api/Monarch.Commands.Interfaces.IArgLexer.html": {
    "href": "api/Monarch.Commands.Interfaces.IArgLexer.html",
    "title": "Interface IArgLexer | Monarch API Reference",
    "keywords": "Interface IArgLexer Namespace Monarch.Commands.Interfaces Assembly Monarch.dll Arg lexer interface public interface IArgLexer Methods Lex(List<TokenBaseClass>, PropertyInfo[]) Lexes the specified tokens. Command Lex(List<TokenBaseClass> tokens, PropertyInfo[] properties) Parameters tokens List<TokenBaseClass> The tokens. properties PropertyInfo[] The properties. Returns Command The resulting command."
  },
  "api/Monarch.Commands.Interfaces.IArgParser.html": {
    "href": "api/Monarch.Commands.Interfaces.IArgParser.html",
    "title": "Interface IArgParser | Monarch API Reference",
    "keywords": "Interface IArgParser Namespace Monarch.Commands.Interfaces Assembly Monarch.dll Arg parser interface public interface IArgParser Methods GetTokens(string[]) Gets the tokens. TokenBaseClass[] GetTokens(string[] args) Parameters args string[] The arguments. Returns TokenBaseClass[] The tokens based on the args sent in."
  },
  "api/Monarch.Commands.Interfaces.ICommand-1.html": {
    "href": "api/Monarch.Commands.Interfaces.ICommand-1.html",
    "title": "Interface ICommand<TInput> | Monarch API Reference",
    "keywords": "Interface ICommand<TInput> Namespace Monarch.Commands.Interfaces Assembly Monarch.dll Command interface public interface ICommand<TInput> : ICommand Type Parameters TInput The type of the input. Inherited Members ICommand.Aliases ICommand.Description ICommand.Name ICommand.CanRun(string) ICommand.CreateInput() ICommand.Run(object)"
  },
  "api/Monarch.Commands.Interfaces.ICommand.html": {
    "href": "api/Monarch.Commands.Interfaces.ICommand.html",
    "title": "Interface ICommand | Monarch API Reference",
    "keywords": "Interface ICommand Namespace Monarch.Commands.Interfaces Assembly Monarch.dll Command interface public interface ICommand Properties Aliases Gets the aliases. string[] Aliases { get; } Property Value string[] The aliases. Description Gets the description. string Description { get; } Property Value string The description. Name Gets the name string Name { get; } Property Value string The name Methods CanRun(string) Determines whether this instance can run the specified argument. bool CanRun(string arg) Parameters arg string The argument. Returns bool true if this instance can run the specified argument; otherwise, false. CreateInput() Creates a command input. object CreateInput() Returns object The command input. Run(object) Runs the specified input. Task<int> Run(object input) Parameters input object The input. Returns Task<int> The result"
  },
  "api/Monarch.Commands.Interfaces.html": {
    "href": "api/Monarch.Commands.Interfaces.html",
    "title": "Namespace Monarch.Commands.Interfaces | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands.Interfaces Interfaces IArgLexer Arg lexer interface IArgParser Arg parser interface ICommand Command interface ICommand<TInput> Command interface"
  },
  "api/Monarch.Commands.Lexer.ArgLexer.html": {
    "href": "api/Monarch.Commands.Lexer.ArgLexer.html",
    "title": "Class ArgLexer | Monarch API Reference",
    "keywords": "Class ArgLexer Namespace Monarch.Commands.Lexer Assembly Monarch.dll Arg Lexer public class ArgLexer : IArgLexer Inheritance object ArgLexer Implements IArgLexer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Lex(List<TokenBaseClass>, PropertyInfo[]) Lexes the specified tokens. public Command Lex(List<TokenBaseClass> tokens, PropertyInfo[] properties) Parameters tokens List<TokenBaseClass> The tokens. properties PropertyInfo[] The properties. Returns Command The command See Also IArgLexer"
  },
  "api/Monarch.Commands.Lexer.Command.html": {
    "href": "api/Monarch.Commands.Lexer.Command.html",
    "title": "Class Command | Monarch API Reference",
    "keywords": "Class Command Namespace Monarch.Commands.Lexer Assembly Monarch.dll Command public class Command Inheritance object Command Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Command() Initializes a new instance of the Command class. public Command() Properties Name Gets or sets the name. public TokenBaseClass? Name { get; set; } Property Value TokenBaseClass The name. Properties Gets or sets the properties. public List<Property> Properties { get; set; } Property Value List<Property> The properties. Methods GetValue(object) Gets the value. public object GetValue(object inputObject) Parameters inputObject object The input object. Returns object The resulting value. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance."
  },
  "api/Monarch.Commands.Lexer.Property.html": {
    "href": "api/Monarch.Commands.Lexer.Property.html",
    "title": "Class Property | Monarch API Reference",
    "keywords": "Class Property Namespace Monarch.Commands.Lexer Assembly Monarch.dll Property Info public class Property Inheritance object Property Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Property() Initializes a new instance of the Property class. public Property() Properties FlagName Gets or sets the name of the flag. public TokenBaseClass? FlagName { get; set; } Property Value TokenBaseClass The name of the flag. FlagValue Gets or sets the flag value. public List<TokenBaseClass> FlagValue { get; set; } Property Value List<TokenBaseClass> The flag value. IsIEnumerable Gets a value indicating whether this instance is ienumerable. public bool IsIEnumerable { get; } Property Value bool true if this instance is ienumerable; otherwise, false. MaxValueCount Gets the maximum value count. public int MaxValueCount { get; } Property Value int The maximum value count. PropertyInfo Gets or sets the property. public PropertyInfo? PropertyInfo { get; set; } Property Value PropertyInfo The property. Methods GetValue(object) Gets the value. public void GetValue(object inputObject) Parameters inputObject object The input object. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance."
  },
  "api/Monarch.Commands.Lexer.html": {
    "href": "api/Monarch.Commands.Lexer.html",
    "title": "Namespace Monarch.Commands.Lexer | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands.Lexer Classes ArgLexer Arg Lexer Command Command Property Property Info"
  },
  "api/Monarch.Commands.Parser.ArgParser.html": {
    "href": "api/Monarch.Commands.Parser.ArgParser.html",
    "title": "Class ArgParser | Monarch API Reference",
    "keywords": "Class ArgParser Namespace Monarch.Commands.Parser Assembly Monarch.dll Arg parser public class ArgParser : IArgParser Inheritance object ArgParser Implements IArgParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ArgParser(IOptions, IEnumerable<ICommand>) Initializes a new instance of the ArgParser class. public ArgParser(IOptions options, IEnumerable<ICommand> commands) Parameters options IOptions The options. commands IEnumerable<ICommand> The commands. Properties Commands Gets the commands. public IEnumerable<ICommand> Commands { get; } Property Value IEnumerable<ICommand> The commands. Options Gets the options. public IOptions Options { get; } Property Value IOptions The options. Methods GetTokens(string[]) Gets the tokens. public TokenBaseClass[] GetTokens(string[] args) Parameters args string[] The arguments. Returns TokenBaseClass[] Converts the args into tokens. Exceptions ParsingException Unable to find command. See Also IArgParser"
  },
  "api/Monarch.Commands.Parser.CommandToken.html": {
    "href": "api/Monarch.Commands.Parser.CommandToken.html",
    "title": "Class CommandToken | Monarch API Reference",
    "keywords": "Class CommandToken Namespace Monarch.Commands.Parser Assembly Monarch.dll Command token public class CommandToken : TokenBaseClass Inheritance object TokenBaseClass CommandToken Inherited Members TokenBaseClass.UpperValue TokenBaseClass.Value TokenBaseClass.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CommandToken(string) Initializes a new instance of the CommandToken class. public CommandToken(string token) Parameters token string The token. See Also TokenBaseClass"
  },
  "api/Monarch.Commands.Parser.OptionNameToken.html": {
    "href": "api/Monarch.Commands.Parser.OptionNameToken.html",
    "title": "Class OptionNameToken | Monarch API Reference",
    "keywords": "Class OptionNameToken Namespace Monarch.Commands.Parser Assembly Monarch.dll Option name token public class OptionNameToken : TokenBaseClass Inheritance object TokenBaseClass OptionNameToken Inherited Members TokenBaseClass.UpperValue TokenBaseClass.Value TokenBaseClass.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OptionNameToken(string) Initializes a new instance of the OptionNameToken class. public OptionNameToken(string value) Parameters value string The value. See Also TokenBaseClass"
  },
  "api/Monarch.Commands.Parser.OptionValueToken.html": {
    "href": "api/Monarch.Commands.Parser.OptionValueToken.html",
    "title": "Class OptionValueToken | Monarch API Reference",
    "keywords": "Class OptionValueToken Namespace Monarch.Commands.Parser Assembly Monarch.dll Option value token public class OptionValueToken : TokenBaseClass Inheritance object TokenBaseClass OptionValueToken Inherited Members TokenBaseClass.UpperValue TokenBaseClass.Value TokenBaseClass.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OptionValueToken(string) Initializes a new instance of the OptionValueToken class. public OptionValueToken(string value) Parameters value string The value. See Also TokenBaseClass"
  },
  "api/Monarch.Commands.Parser.TokenBaseClass.html": {
    "href": "api/Monarch.Commands.Parser.TokenBaseClass.html",
    "title": "Class TokenBaseClass | Monarch API Reference",
    "keywords": "Class TokenBaseClass Namespace Monarch.Commands.Parser Assembly Monarch.dll Token base class public abstract class TokenBaseClass Inheritance object TokenBaseClass Derived CommandToken OptionNameToken OptionValueToken Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TokenBaseClass(string) Initializes a new instance of the TokenBaseClass class. protected TokenBaseClass(string value) Parameters value string The value. Exceptions ArgumentNullException value Properties UpperValue Gets the upper value. public string UpperValue { get; } Property Value string The upper value. Value Gets the value. public string Value { get; } Property Value string The value. Methods ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance."
  },
  "api/Monarch.Commands.Parser.html": {
    "href": "api/Monarch.Commands.Parser.html",
    "title": "Namespace Monarch.Commands.Parser | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands.Parser Classes ArgParser Arg parser CommandToken Command token OptionNameToken Option name token OptionValueToken Option value token TokenBaseClass Token base class"
  },
  "api/Monarch.Commands.html": {
    "href": "api/Monarch.Commands.html",
    "title": "Namespace Monarch.Commands | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands Classes CommandManager Manager class."
  },
  "api/Monarch.Defaults.DefaultConsoleWriter.html": {
    "href": "api/Monarch.Defaults.DefaultConsoleWriter.html",
    "title": "Class DefaultConsoleWriter | Monarch API Reference",
    "keywords": "Class DefaultConsoleWriter Namespace Monarch.Defaults Assembly Monarch.dll Default console writer public class DefaultConsoleWriter : IConsoleWriter Inheritance object DefaultConsoleWriter Implements IConsoleWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultConsoleWriter(IEnumerable<IOptions>) Initializes a new instance of the DefaultConsoleWriter class. public DefaultConsoleWriter(IEnumerable<IOptions> options) Parameters options IEnumerable<IOptions> The options. Properties ConsoleWidth Gets the width of the console. public int ConsoleWidth { get; } Property Value int The width of the console. CurrentIndent Gets the current indent. public int CurrentIndent { get; } Property Value int The current indent. Separator Gets the separator. public string Separator { get; } Property Value string The separator. Methods Indent() Indents this instance. public IConsoleWriter Indent() Returns IConsoleWriter This Outdent() Outdents this instance. public IConsoleWriter Outdent() Returns IConsoleWriter This ResetConsoleColor() Resets the color of the console. public IConsoleWriter ResetConsoleColor() Returns IConsoleWriter This. SetConsoleColor(ConsoleColor) Sets the color of the console. public IConsoleWriter SetConsoleColor(ConsoleColor color) Parameters color ConsoleColor The color. Returns IConsoleWriter This. Write(bool) Writes the value and ends with a new line. public IConsoleWriter Write(bool value) Parameters value bool The value. Returns IConsoleWriter This Write(char) Writes the value and ends with a new line. public IConsoleWriter Write(char value) Parameters value char The value. Returns IConsoleWriter This Write(char[]) Writes the value and ends with a new line. public IConsoleWriter Write(char[] value) Parameters value char[] The value. Returns IConsoleWriter This Write(decimal) Writes the value and ends with a new line. public IConsoleWriter Write(decimal value) Parameters value decimal The value. Returns IConsoleWriter This Write(double) Writes the value and ends with a new line. public IConsoleWriter Write(double value) Parameters value double The value. Returns IConsoleWriter This Write(int) Writes the value and ends with a new line. public IConsoleWriter Write(int value) Parameters value int The value. Returns IConsoleWriter This Write(long) Writes the value and ends with a new line. public IConsoleWriter Write(long value) Parameters value long The value. Returns IConsoleWriter This Write(object) Writes the value and ends with a new line. public IConsoleWriter Write(object value) Parameters value object The value. Returns IConsoleWriter This Write(float) Writes the value and ends with a new line. public IConsoleWriter Write(float value) Parameters value float The value. Returns IConsoleWriter This Write(string) Writes the text and ends with a new line. public IConsoleWriter Write(string value) Parameters value string The value. Returns IConsoleWriter This Write(uint) Writes the value and ends with a new line. public IConsoleWriter Write(uint value) Parameters value uint The value. Returns IConsoleWriter This Write(ulong) Writes the value and ends with a new line. public IConsoleWriter Write(ulong value) Parameters value ulong The value. Returns IConsoleWriter This WriteLine() Writes a new line. public IConsoleWriter WriteLine() Returns IConsoleWriter This WriteLine(bool) Writes the value and ends with a new line. public IConsoleWriter WriteLine(bool value) Parameters value bool The value. Returns IConsoleWriter This WriteLine(char) Writes the value and ends with a new line. public IConsoleWriter WriteLine(char value) Parameters value char The value. Returns IConsoleWriter This WriteLine(char[]) Writes the value and ends with a new line. public IConsoleWriter WriteLine(char[] value) Parameters value char[] The value. Returns IConsoleWriter This WriteLine(decimal) Writes the value and ends with a new line. public IConsoleWriter WriteLine(decimal value) Parameters value decimal The value. Returns IConsoleWriter This WriteLine(double) Writes the value and ends with a new line. public IConsoleWriter WriteLine(double value) Parameters value double The value. Returns IConsoleWriter This WriteLine(int) Writes the value and ends with a new line. public IConsoleWriter WriteLine(int value) Parameters value int The value. Returns IConsoleWriter This WriteLine(long) Writes the value and ends with a new line. public IConsoleWriter WriteLine(long value) Parameters value long The value. Returns IConsoleWriter This WriteLine(object) Writes the value and ends with a new line. public IConsoleWriter WriteLine(object value) Parameters value object The value. Returns IConsoleWriter This WriteLine(float) Writes the value and ends with a new line. public IConsoleWriter WriteLine(float value) Parameters value float The value. Returns IConsoleWriter This WriteLine(string) Writes the text and ends with a new line. public IConsoleWriter WriteLine(string value) Parameters value string The value. Returns IConsoleWriter This WriteLine(uint) Writes the value and ends with a new line. public IConsoleWriter WriteLine(uint value) Parameters value uint The value. Returns IConsoleWriter This WriteLine(ulong) Writes the value and ends with a new line. public IConsoleWriter WriteLine(ulong value) Parameters value ulong The value. Returns IConsoleWriter This WriteSeparator() Writes the separator. public IConsoleWriter WriteSeparator() Returns IConsoleWriter This See Also IConsoleWriter IConsoleWriter"
  },
  "api/Monarch.Defaults.DefaultOptions.html": {
    "href": "api/Monarch.Defaults.DefaultOptions.html",
    "title": "Class DefaultOptions | Monarch API Reference",
    "keywords": "Class DefaultOptions Namespace Monarch.Defaults Assembly Monarch.dll Default options public class DefaultOptions : IOptions Inheritance object DefaultOptions Implements IOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CommandPrefix Gets the command prefix. public string CommandPrefix { get; } Property Value string The command prefix. FlagPrefix Gets the flag prefix. public string FlagPrefix { get; } Property Value string The flag prefix. IndentAmount Gets the indent amount. public int IndentAmount { get; } Property Value int The indent amount. See Also IOptions"
  },
  "api/Monarch.Defaults.html": {
    "href": "api/Monarch.Defaults.html",
    "title": "Namespace Monarch.Defaults | Monarch API Reference",
    "keywords": "Namespace Monarch.Defaults Classes DefaultConsoleWriter Default console writer DefaultOptions Default options"
  },
  "api/Monarch.Exceptions.ParsingException.html": {
    "href": "api/Monarch.Exceptions.ParsingException.html",
    "title": "Class ParsingException | Monarch API Reference",
    "keywords": "Class ParsingException Namespace Monarch.Exceptions Assembly Monarch.dll Parsing exception public class ParsingException : Exception, ISerializable Inheritance object Exception ParsingException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ParsingException() Initializes a new instance of the ParsingException class. public ParsingException() ParsingException(SerializationInfo, StreamingContext) Initializes a new instance of the ParsingException class. protected ParsingException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The StreamingContext that contains contextual information about the source or destination. ParsingException(string) Initializes a new instance of the ParsingException class. public ParsingException(string message) Parameters message string The message that describes the error. ParsingException(string, Exception) Initializes a new instance of the ParsingException class. public ParsingException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. See Also Exception"
  },
  "api/Monarch.Exceptions.html": {
    "href": "api/Monarch.Exceptions.html",
    "title": "Namespace Monarch.Exceptions | Monarch API Reference",
    "keywords": "Namespace Monarch.Exceptions Classes ParsingException Parsing exception"
  },
  "api/Monarch.Interfaces.IConsoleWriter.html": {
    "href": "api/Monarch.Interfaces.IConsoleWriter.html",
    "title": "Interface IConsoleWriter | Monarch API Reference",
    "keywords": "Interface IConsoleWriter Namespace Monarch.Interfaces Assembly Monarch.dll Console writer public interface IConsoleWriter Methods Indent() Indents this instance. IConsoleWriter Indent() Returns IConsoleWriter This Outdent() Outdents this instance. IConsoleWriter Outdent() Returns IConsoleWriter This ResetConsoleColor() Resets the color of the console. IConsoleWriter ResetConsoleColor() Returns IConsoleWriter This SetConsoleColor(ConsoleColor) Sets the color of the console. IConsoleWriter SetConsoleColor(ConsoleColor color) Parameters color ConsoleColor The color. Returns IConsoleWriter This Write(bool) Writes the value. IConsoleWriter Write(bool value) Parameters value bool The value. Returns IConsoleWriter This Write(char) Writes the value. IConsoleWriter Write(char value) Parameters value char The value. Returns IConsoleWriter This Write(char[]) Writes the value. IConsoleWriter Write(char[] value) Parameters value char[] The value. Returns IConsoleWriter This Write(decimal) Writes the value. IConsoleWriter Write(decimal value) Parameters value decimal The value. Returns IConsoleWriter This Write(double) Writes the value. IConsoleWriter Write(double value) Parameters value double The value. Returns IConsoleWriter This Write(int) Writes the value. IConsoleWriter Write(int value) Parameters value int The value. Returns IConsoleWriter This Write(long) Writes the value. IConsoleWriter Write(long value) Parameters value long The value. Returns IConsoleWriter This Write(object) Writes the value. IConsoleWriter Write(object value) Parameters value object The value. Returns IConsoleWriter This Write(float) Writes the value. IConsoleWriter Write(float value) Parameters value float The value. Returns IConsoleWriter This Write(string) Writes the value. IConsoleWriter Write(string value) Parameters value string The value. Returns IConsoleWriter This Write(uint) Writes the value. IConsoleWriter Write(uint value) Parameters value uint The value. Returns IConsoleWriter This Write(ulong) Writes the value. IConsoleWriter Write(ulong value) Parameters value ulong The value. Returns IConsoleWriter This WriteLine() Writes the text and ends with a new line. IConsoleWriter WriteLine() Returns IConsoleWriter This WriteLine(bool) Writes the text and ends with a new line. IConsoleWriter WriteLine(bool value) Parameters value bool The value. Returns IConsoleWriter This WriteLine(char) Writes the text and ends with a new line. IConsoleWriter WriteLine(char value) Parameters value char The value. Returns IConsoleWriter This WriteLine(char[]) Writes the text and ends with a new line. IConsoleWriter WriteLine(char[] value) Parameters value char[] The value. Returns IConsoleWriter This WriteLine(decimal) Writes the text and ends with a new line. IConsoleWriter WriteLine(decimal value) Parameters value decimal The value. Returns IConsoleWriter This WriteLine(double) Writes the text and ends with a new line. IConsoleWriter WriteLine(double value) Parameters value double The value. Returns IConsoleWriter This WriteLine(int) Writes the text and ends with a new line. IConsoleWriter WriteLine(int value) Parameters value int The value. Returns IConsoleWriter This WriteLine(long) Writes the text and ends with a new line. IConsoleWriter WriteLine(long value) Parameters value long The value. Returns IConsoleWriter This WriteLine(object) Writes the text and ends with a new line. IConsoleWriter WriteLine(object value) Parameters value object The value. Returns IConsoleWriter This WriteLine(float) Writes the text and ends with a new line. IConsoleWriter WriteLine(float value) Parameters value float The value. Returns IConsoleWriter This WriteLine(string) Writes the text and ends with a new line. IConsoleWriter WriteLine(string value) Parameters value string The value. Returns IConsoleWriter This WriteLine(uint) Writes the text and ends with a new line. IConsoleWriter WriteLine(uint value) Parameters value uint The value. Returns IConsoleWriter This WriteLine(ulong) Writes the text and ends with a new line. IConsoleWriter WriteLine(ulong value) Parameters value ulong The value. Returns IConsoleWriter This WriteSeparator() Writes the separator. IConsoleWriter WriteSeparator() Returns IConsoleWriter This"
  },
  "api/Monarch.Interfaces.IOptions.html": {
    "href": "api/Monarch.Interfaces.IOptions.html",
    "title": "Interface IOptions | Monarch API Reference",
    "keywords": "Interface IOptions Namespace Monarch.Interfaces Assembly Monarch.dll Options interface public interface IOptions Properties CommandPrefix Gets the command prefix. string CommandPrefix { get; } Property Value string The command prefix. FlagPrefix Gets the flag prefix. string FlagPrefix { get; } Property Value string The flag prefix. IndentAmount Gets the indent amount. int IndentAmount { get; } Property Value int The indent amount."
  },
  "api/Monarch.Interfaces.html": {
    "href": "api/Monarch.Interfaces.html",
    "title": "Namespace Monarch.Interfaces | Monarch API Reference",
    "keywords": "Namespace Monarch.Interfaces Interfaces IConsoleWriter Console writer IOptions Options interface"
  },
  "api/Monarch.html": {
    "href": "api/Monarch.html",
    "title": "Namespace Monarch | Monarch API Reference",
    "keywords": "Namespace Monarch Classes CommandRunner Command runner"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Monarch API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Program Code | Monarch API Reference",
    "keywords": "Program Code using Microsoft.Extensions.DependencyInjection; using Monarch; namespace ExampleApp { internal static class Program { private static void Main(string[] args) { new ServiceCollection().AddCanisterModules(); new ServiceCollection().AddCanisterModules().BuildServiceProvider().GetService<CommandRunner>().Run(args); } } } Command Code using BigBook; using Microsoft.Extensions.DependencyInjection; using Monarch.Commands.Attributes; using Monarch.Commands.BaseClasses; using System; using System.Reflection; using System.Threading.Tasks; namespace ExampleApp { /// <summary> /// Example command available to the user to run from the command line /// </summary> /// <seealso cref=\"CommandBaseClass&lt;ExampleInput&gt;\" /> public class ExampleCommand1 : CommandBaseClass<ExampleInput> { /// <summary> /// Gets the aliases. These are the names that can be used to call the command. /// </summary> /// <value> /// The aliases. /// </value> public override string[] Aliases { get; } = new[] { \"Example1\" }; /// <summary> /// Gets the description. This is what is displayed when the user calls the help command. /// </summary> /// <value> /// The description. /// </value> public override string Description { get; } = \"Example command.\"; /// <summary> /// Gets the name. This is the name of the command. /// </summary> /// <value> /// The name. /// </value> public override string Name { get; } = \"Example Command 1\"; /// <summary> /// Runs the specified input. This is where the command does its work. /// </summary> /// <param name=\"input\">The input.</param> /// <returns> /// The result. /// </returns> protected override Task<int> Run(ExampleInput input) { Console.WriteLine(input.ExampleEnum); return Task.FromResult(0); } } /// <summary> /// Example input for the command. /// </summary> public class ExampleInput { /// <summary> /// Gets or sets the example enum. This is an example of an enum input. /// </summary> /// <value> /// The example enum. /// </value> public ExampleEnum ExampleEnum { get; set; } /// <summary> /// Gets or sets the name value. This is an example of a string input. The <see cref=\"DynamicDisplayAttribute\"/> is used to display the current assemblies loaded. /// </summary> /// <value> /// The name value. /// </value> [DynamicDisplay(typeof(NameValueDisplay))] public string NameValue { get; set; } } /// <summary> /// Used to display the current assemblies loaded. /// </summary> internal class NameValueDisplay { /// <summary> /// Converts to string. /// </summary> /// <returns> /// A <see cref=\"System.String\" /> that represents this instance. /// </returns> public override string ToString() { return \"Assemblies currently loaded: \" + new ServiceCollection().AddCanisterModules().BuildServiceProvider().GetServices<Assembly>().ToString(x => x.GetName().Name); } } /// <summary> /// Example enum for the possible values /// </summary> public enum ExampleEnum { /// <summary> /// The value1 /// </summary> Value1, /// <summary> /// The value2 /// </summary> Value2, /// <summary> /// The value3 /// </summary> Value3 } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Monarch | Monarch API Reference",
    "keywords": "Monarch Monarch is a command line parser/task runner. Basic Usage In order to use the system, you need to register it with your ServiceCollection: serviceCollection.AddCanisterModules(); This is required prior to using the Monarch class for the first time. Once it is wired up, you can use the CommandRunner class: var Instance = new CommandRunner(); return Instance.Run(args); The CommandRunner class has a Run method which parses the args passed in and runs the appropriate command. The library has help and version commands built in to the system, however to create your own commands you need to create a command and also an input class: public class TestCommand : CommandBaseClass<TestInput> { public override string[] Aliases => new string[] { \"Test\" }; public override string Description => \"Test command\"; public override string Name => \"Test Command\"; protected override async Task<int> Run(TestInput input) { await Task.CompletedTask; Console.WriteLine(input.Value1); Console.WriteLine(input.Value2); Console.WriteLine(input.Value3.ToString(x => x)); return 0; } } public class TestInput { [Display(Description = \"Value 1 Property\")] public int Value1 { get; set; } [Display(Description = \"Value 2 Property\")] public string Value2 { get; set; } [Display(Description = \"Value 3 Property\")] [MaxLength(3)] public List<string> Value3 { get; set; } } The command above inherits from the CommandBaseClass and defines the input that it expects. In this case TestInput. TestInput is how the command line arguments should be parsed by the system. The commands must define the aliases, description, and name for the command. The TestInput then defines properties and uses the DisplayAttribute from the System.ComponentModel.DataAnnotations namespace to define information. Also any data annotations defining max length, required, etc. are used to validate the input. Options By default the system does not require you to set options. However you can specify some options found within the system including command prefix, flag prefix, and indentation amount. In order to override what is in the system just create a class that inherits from IOptions: public class DefaultOptions : IOptions { /// <summary> /// Gets the command prefix. /// </summary> /// <value>The command prefix.</value> public string CommandPrefix { get; } = \"\"; /// <summary> /// Gets the flag prefix. /// </summary> /// <value>The flag prefix.</value> public string FlagPrefix { get; } = \"-\"; /// <summary> /// Gets the indent amount. /// </summary> /// <value>The indent amount.</value> public int IndentAmount { get; } = 4; }"
  }
}