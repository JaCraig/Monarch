{
  "api/Microsoft.Extensions.DependencyInjection.CanisterExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.CanisterExtensions.html",
    "title": "Class CanisterExtensions | Monarch API Reference",
    "keywords": "Class CanisterExtensions Canister extensions Inheritance object CanisterExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: Monarch.dll Syntax public static class CanisterExtensions Methods | Improve this Doc View Source RegisterMonarch(ICanisterConfiguration?) Registers monarch with Canister. Declaration public static ICanisterConfiguration? RegisterMonarch(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The bootstrapper."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Monarch API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes CanisterExtensions Canister extensions"
  },
  "api/Monarch.CanisterModules.MonarchModule.html": {
    "href": "api/Monarch.CanisterModules.MonarchModule.html",
    "title": "Class MonarchModule | Monarch API Reference",
    "keywords": "Class MonarchModule Monarch module Inheritance object MonarchModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch.CanisterModules Assembly: Monarch.dll Syntax public class MonarchModule : IModule Properties | Improve this Doc View Source Order Order to run this in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Improve this Doc View Source Load(IServiceCollection?) Loads the module using the bootstrapper Declaration public void Load(IServiceCollection? bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper The bootstrapper. See Also IModule Implements IModule See Also IModule"
  },
  "api/Monarch.CanisterModules.html": {
    "href": "api/Monarch.CanisterModules.html",
    "title": "Namespace Monarch.CanisterModules | Monarch API Reference",
    "keywords": "Namespace Monarch.CanisterModules Classes MonarchModule Monarch module"
  },
  "api/Monarch.CommandRunner.html": {
    "href": "api/Monarch.CommandRunner.html",
    "title": "Class CommandRunner | Monarch API Reference",
    "keywords": "Class CommandRunner Command runner Inheritance object CommandRunner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch Assembly: Monarch.dll Syntax public class CommandRunner Constructors | Improve this Doc View Source CommandRunner() Initializes a new instance of the CommandRunner class. Declaration public CommandRunner() | Improve this Doc View Source CommandRunner(CommandManager?) Initializes a new instance of the CommandRunner class. Declaration public CommandRunner(CommandManager? manager) Parameters Type Name Description CommandManager manager The manager. Properties | Improve this Doc View Source Manager Gets the manager. Declaration public CommandManager? Manager { get; } Property Value Type Description CommandManager The manager. Methods | Improve this Doc View Source Run(string[]) Runs the specified arguments. Declaration public Task<int> Run(string[] args) Parameters Type Name Description string[] args The arguments. Returns Type Description Task<int> The result."
  },
  "api/Monarch.Commands.Attributes.DynamicDisplayAttribute.html": {
    "href": "api/Monarch.Commands.Attributes.DynamicDisplayAttribute.html",
    "title": "Class DynamicDisplayAttribute | Monarch API Reference",
    "keywords": "Class DynamicDisplayAttribute Dynamic display attribute Inheritance object Attribute DynamicDisplayAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch.Commands.Attributes Assembly: Monarch.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public sealed class DynamicDisplayAttribute : Attribute Constructors | Improve this Doc View Source DynamicDisplayAttribute(Type) Initializes a new instance of the DynamicDisplayAttribute class. Declaration public DynamicDisplayAttribute(Type descriptionType) Parameters Type Name Description Type descriptionType Type of the description. See Also Attribute Properties | Improve this Doc View Source DescriptionType Gets the type of the description. Declaration public Type DescriptionType { get; } Property Value Type Description Type The type of the description. See Also Attribute Methods | Improve this Doc View Source GetDescription() Gets the description. Declaration public string GetDescription() Returns Type Description string The description. See Also Attribute See Also Attribute"
  },
  "api/Monarch.Commands.Attributes.html": {
    "href": "api/Monarch.Commands.Attributes.html",
    "title": "Namespace Monarch.Commands.Attributes | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands.Attributes Classes DynamicDisplayAttribute Dynamic display attribute"
  },
  "api/Monarch.Commands.BaseClasses.CommandBaseClass-1.html": {
    "href": "api/Monarch.Commands.BaseClasses.CommandBaseClass-1.html",
    "title": "Class CommandBaseClass<TInput> | Monarch API Reference",
    "keywords": "Class CommandBaseClass<TInput> Command base class Inheritance object CommandBaseClass<TInput> HelpCommand VersionCommand Implements ICommand<TInput> ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch.Commands.BaseClasses Assembly: Monarch.dll Syntax public abstract class CommandBaseClass<TInput> : ICommand<TInput>, ICommand where TInput : class, new() Type Parameters Name Description TInput The type of the input. Constructors | Improve this Doc View Source CommandBaseClass() Initializes a new instance of the CommandBaseClass<TInput> class. Declaration protected CommandBaseClass() See Also ICommand<TInput> Properties | Improve this Doc View Source Aliases Gets the aliases. Declaration public abstract string[] Aliases { get; } Property Value Type Description string[] The aliases. See Also ICommand<TInput> | Improve this Doc View Source Description Gets the description. Declaration public abstract string Description { get; } Property Value Type Description string The description. See Also ICommand<TInput> | Improve this Doc View Source Name Gets the name. Declaration public abstract string Name { get; } Property Value Type Description string The name. See Also ICommand<TInput> Methods | Improve this Doc View Source CanRun(string) Determines whether this instance can run the specified argument. Declaration public bool CanRun(string arg) Parameters Type Name Description string arg The argument. Returns Type Description bool true if this instance can run the specified argument; otherwise, false. See Also ICommand<TInput> | Improve this Doc View Source CreateInput() Creates the input. Declaration public object CreateInput() Returns Type Description object See Also ICommand<TInput> | Improve this Doc View Source Run(object) Runs the specified input. Declaration public Task<int> Run(object input) Parameters Type Name Description object input The input. Returns Type Description Task<int> The result. See Also ICommand<TInput> | Improve this Doc View Source Run(TInput) Runs the specified input. Declaration protected abstract Task<int> Run(TInput input) Parameters Type Name Description TInput input The input. Returns Type Description Task<int> The result. See Also ICommand<TInput> Implements ICommand<TInput> ICommand See Also ICommand<TInput>"
  },
  "api/Monarch.Commands.BaseClasses.html": {
    "href": "api/Monarch.Commands.BaseClasses.html",
    "title": "Namespace Monarch.Commands.BaseClasses | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands.BaseClasses Classes CommandBaseClass<TInput> Command base class"
  },
  "api/Monarch.Commands.CommandManager.html": {
    "href": "api/Monarch.Commands.CommandManager.html",
    "title": "Class CommandManager | Monarch API Reference",
    "keywords": "Class CommandManager Manager class. Inheritance object CommandManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch.Commands Assembly: Monarch.dll Syntax public class CommandManager Constructors | Improve this Doc View Source CommandManager(IEnumerable<ICommand>, IEnumerable<IOptions>, IEnumerable<IArgLexer>, IEnumerable<IArgParser>) Initializes a new instance of the CommandManager class. Declaration public CommandManager(IEnumerable<ICommand> commands, IEnumerable<IOptions> options, IEnumerable<IArgLexer> lexer, IEnumerable<IArgParser> parser) Parameters Type Name Description IEnumerable<ICommand> commands The commands. IEnumerable<IOptions> options The options. IEnumerable<IArgLexer> lexer The lexer. IEnumerable<IArgParser> parser The parser. Properties | Improve this Doc View Source Commands Gets the commands. Declaration public IEnumerable<ICommand> Commands { get; } Property Value Type Description IEnumerable<ICommand> The commands. | Improve this Doc View Source Lexer Gets the lexer. Declaration public IArgLexer Lexer { get; } Property Value Type Description IArgLexer The lexer. | Improve this Doc View Source Options Gets the options. Declaration public IOptions Options { get; } Property Value Type Description IOptions The options. | Improve this Doc View Source Parser Gets the parser. Declaration public IArgParser Parser { get; } Property Value Type Description IArgParser The parser. Methods | Improve this Doc View Source GetCommand(string[]) Gets the command. Declaration public ICommand GetCommand(string[] args) Parameters Type Name Description string[] args The arguments. Returns Type Description ICommand The command specified by the arguments. | Improve this Doc View Source GetInput(ICommand, string[]) Gets the input based on the args passed in. Declaration public object GetInput(ICommand command, string[] args) Parameters Type Name Description ICommand command The command. string[] args The arguments. Returns Type Description object The resulting command input."
  },
  "api/Monarch.Commands.Default.EmptyInput.html": {
    "href": "api/Monarch.Commands.Default.EmptyInput.html",
    "title": "Class EmptyInput | Monarch API Reference",
    "keywords": "Class EmptyInput Empty input Inheritance object EmptyInput Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch.Commands.Default Assembly: Monarch.dll Syntax public class EmptyInput"
  },
  "api/Monarch.Commands.Default.HelpCommand.html": {
    "href": "api/Monarch.Commands.Default.HelpCommand.html",
    "title": "Class HelpCommand | Monarch API Reference",
    "keywords": "Class HelpCommand Help command Inheritance object CommandBaseClass<HelpInput> HelpCommand Implements ICommand<HelpInput> ICommand Inherited Members CommandBaseClass<HelpInput>.CanRun(string) CommandBaseClass<HelpInput>.CreateInput() CommandBaseClass<HelpInput>.Run(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch.Commands.Default Assembly: Monarch.dll Syntax public class HelpCommand : CommandBaseClass<HelpInput>, ICommand<HelpInput>, ICommand Constructors | Improve this Doc View Source HelpCommand(IEnumerable<IConsoleWriter>, IEnumerable<IOptions>) Initializes a new instance of the HelpCommand class. Declaration public HelpCommand(IEnumerable<IConsoleWriter> console, IEnumerable<IOptions> options) Parameters Type Name Description IEnumerable<IConsoleWriter> console The console. IEnumerable<IOptions> options The options. See Also CommandBaseClass<TInput> Properties | Improve this Doc View Source Aliases Gets the aliases. Declaration public override string[] Aliases { get; } Property Value Type Description string[] The aliases. Overrides CommandBaseClass<HelpInput>.Aliases See Also CommandBaseClass<TInput> | Improve this Doc View Source Console Gets the console. Declaration public IConsoleWriter Console { get; } Property Value Type Description IConsoleWriter The console. See Also CommandBaseClass<TInput> | Improve this Doc View Source Description Gets the description. Declaration public override string Description { get; } Property Value Type Description string The description. Overrides CommandBaseClass<HelpInput>.Description See Also CommandBaseClass<TInput> | Improve this Doc View Source Name Gets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides CommandBaseClass<HelpInput>.Name See Also CommandBaseClass<TInput> | Improve this Doc View Source Options Gets the options. Declaration public IOptions Options { get; } Property Value Type Description IOptions The options. See Also CommandBaseClass<TInput> Methods | Improve this Doc View Source Run(HelpInput) Runs the specified input. Declaration protected override Task<int> Run(HelpInput input) Parameters Type Name Description HelpInput input The input. Returns Type Description Task<int> The result. Overrides CommandBaseClass<HelpInput>.Run(HelpInput) See Also CommandBaseClass<TInput> Implements ICommand<TInput> ICommand See Also CommandBaseClass<TInput>"
  },
  "api/Monarch.Commands.Default.HelpInput.html": {
    "href": "api/Monarch.Commands.Default.HelpInput.html",
    "title": "Class HelpInput | Monarch API Reference",
    "keywords": "Class HelpInput Help input Inheritance object HelpInput Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch.Commands.Default Assembly: Monarch.dll Syntax public class HelpInput Properties | Improve this Doc View Source Command Gets or sets the command to get help on. Declaration [Display(Description = \"The command that you wish to have information about.\")] public string? Command { get; set; } Property Value Type Description string The command to get help on."
  },
  "api/Monarch.Commands.Default.VersionCommand.html": {
    "href": "api/Monarch.Commands.Default.VersionCommand.html",
    "title": "Class VersionCommand | Monarch API Reference",
    "keywords": "Class VersionCommand Version command Inheritance object CommandBaseClass<EmptyInput> VersionCommand Implements ICommand<EmptyInput> ICommand Inherited Members CommandBaseClass<EmptyInput>.CanRun(string) CommandBaseClass<EmptyInput>.CreateInput() CommandBaseClass<EmptyInput>.Run(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch.Commands.Default Assembly: Monarch.dll Syntax public class VersionCommand : CommandBaseClass<EmptyInput>, ICommand<EmptyInput>, ICommand Constructors | Improve this Doc View Source VersionCommand(IEnumerable<IConsoleWriter>, IEnumerable<IOptions>) Initializes a new instance of the VersionCommand class. Declaration public VersionCommand(IEnumerable<IConsoleWriter> console, IEnumerable<IOptions> options) Parameters Type Name Description IEnumerable<IConsoleWriter> console The console. IEnumerable<IOptions> options The options. See Also CommandBaseClass<TInput> Properties | Improve this Doc View Source Aliases Gets the aliases. Declaration public override string[] Aliases { get; } Property Value Type Description string[] The aliases. Overrides CommandBaseClass<EmptyInput>.Aliases See Also CommandBaseClass<TInput> | Improve this Doc View Source Console Gets the console. Declaration public IConsoleWriter Console { get; } Property Value Type Description IConsoleWriter The console. See Also CommandBaseClass<TInput> | Improve this Doc View Source Description Gets the description. Declaration public override string Description { get; } Property Value Type Description string The description. Overrides CommandBaseClass<EmptyInput>.Description See Also CommandBaseClass<TInput> | Improve this Doc View Source Name Gets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides CommandBaseClass<EmptyInput>.Name See Also CommandBaseClass<TInput> Methods | Improve this Doc View Source Run(EmptyInput) Runs the specified input. Declaration protected override Task<int> Run(EmptyInput input) Parameters Type Name Description EmptyInput input The input. Returns Type Description Task<int> The result. Overrides CommandBaseClass<EmptyInput>.Run(EmptyInput) See Also CommandBaseClass<TInput> Implements ICommand<TInput> ICommand See Also CommandBaseClass<TInput>"
  },
  "api/Monarch.Commands.Default.html": {
    "href": "api/Monarch.Commands.Default.html",
    "title": "Namespace Monarch.Commands.Default | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands.Default Classes EmptyInput Empty input HelpCommand Help command HelpInput Help input VersionCommand Version command"
  },
  "api/Monarch.Commands.Interfaces.IArgLexer.html": {
    "href": "api/Monarch.Commands.Interfaces.IArgLexer.html",
    "title": "Interface IArgLexer | Monarch API Reference",
    "keywords": "Interface IArgLexer Arg lexer interface Namespace: Monarch.Commands.Interfaces Assembly: Monarch.dll Syntax public interface IArgLexer Methods | Improve this Doc View Source Lex(List<TokenBaseClass>, PropertyInfo[]) Lexes the specified tokens. Declaration Command Lex(List<TokenBaseClass> tokens, PropertyInfo[] properties) Parameters Type Name Description List<TokenBaseClass> tokens The tokens. PropertyInfo[] properties The properties. Returns Type Description Command The resulting command."
  },
  "api/Monarch.Commands.Interfaces.IArgParser.html": {
    "href": "api/Monarch.Commands.Interfaces.IArgParser.html",
    "title": "Interface IArgParser | Monarch API Reference",
    "keywords": "Interface IArgParser Arg parser interface Namespace: Monarch.Commands.Interfaces Assembly: Monarch.dll Syntax public interface IArgParser Methods | Improve this Doc View Source GetTokens(string[]) Gets the tokens. Declaration TokenBaseClass[] GetTokens(string[] args) Parameters Type Name Description string[] args The arguments. Returns Type Description TokenBaseClass[] The tokens based on the args sent in."
  },
  "api/Monarch.Commands.Interfaces.ICommand-1.html": {
    "href": "api/Monarch.Commands.Interfaces.ICommand-1.html",
    "title": "Interface ICommand<TInput> | Monarch API Reference",
    "keywords": "Interface ICommand<TInput> Command interface Inherited Members ICommand.Aliases ICommand.Description ICommand.Name ICommand.CanRun(string) ICommand.CreateInput() ICommand.Run(object) Namespace: Monarch.Commands.Interfaces Assembly: Monarch.dll Syntax public interface ICommand<TInput> : ICommand Type Parameters Name Description TInput The type of the input."
  },
  "api/Monarch.Commands.Interfaces.ICommand.html": {
    "href": "api/Monarch.Commands.Interfaces.ICommand.html",
    "title": "Interface ICommand | Monarch API Reference",
    "keywords": "Interface ICommand Command interface Namespace: Monarch.Commands.Interfaces Assembly: Monarch.dll Syntax public interface ICommand Properties | Improve this Doc View Source Aliases Gets the aliases. Declaration string[] Aliases { get; } Property Value Type Description string[] The aliases. | Improve this Doc View Source Description Gets the description. Declaration string Description { get; } Property Value Type Description string The description. | Improve this Doc View Source Name Gets the name Declaration string Name { get; } Property Value Type Description string The name Methods | Improve this Doc View Source CanRun(string) Determines whether this instance can run the specified argument. Declaration bool CanRun(string arg) Parameters Type Name Description string arg The argument. Returns Type Description bool true if this instance can run the specified argument; otherwise, false. | Improve this Doc View Source CreateInput() Creates a command input. Declaration object CreateInput() Returns Type Description object The command input. | Improve this Doc View Source Run(object) Runs the specified input. Declaration Task<int> Run(object input) Parameters Type Name Description object input The input. Returns Type Description Task<int> The result"
  },
  "api/Monarch.Commands.Interfaces.html": {
    "href": "api/Monarch.Commands.Interfaces.html",
    "title": "Namespace Monarch.Commands.Interfaces | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands.Interfaces Interfaces IArgLexer Arg lexer interface IArgParser Arg parser interface ICommand Command interface ICommand<TInput> Command interface"
  },
  "api/Monarch.Commands.Lexer.ArgLexer.html": {
    "href": "api/Monarch.Commands.Lexer.ArgLexer.html",
    "title": "Class ArgLexer | Monarch API Reference",
    "keywords": "Class ArgLexer Arg Lexer Inheritance object ArgLexer Implements IArgLexer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch.Commands.Lexer Assembly: Monarch.dll Syntax public class ArgLexer : IArgLexer Methods | Improve this Doc View Source Lex(List<TokenBaseClass>, PropertyInfo[]) Lexes the specified tokens. Declaration public Command Lex(List<TokenBaseClass> tokens, PropertyInfo[] properties) Parameters Type Name Description List<TokenBaseClass> tokens The tokens. PropertyInfo[] properties The properties. Returns Type Description Command The command See Also IArgLexer Implements IArgLexer See Also IArgLexer"
  },
  "api/Monarch.Commands.Lexer.Command.html": {
    "href": "api/Monarch.Commands.Lexer.Command.html",
    "title": "Class Command | Monarch API Reference",
    "keywords": "Class Command Command Inheritance object Command Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Monarch.Commands.Lexer Assembly: Monarch.dll Syntax public class Command Constructors | Improve this Doc View Source Command() Initializes a new instance of the Command class. Declaration public Command() Properties | Improve this Doc View Source Name Gets or sets the name. Declaration public TokenBaseClass? Name { get; set; } Property Value Type Description TokenBaseClass The name. | Improve this Doc View Source Properties Gets or sets the properties. Declaration public List<Property> Properties { get; set; } Property Value Type Description List<Property> The properties. Methods | Improve this Doc View Source GetValue(object) Gets the value. Declaration public object GetValue(object inputObject) Parameters Type Name Description object inputObject The input object. Returns Type Description object The resulting value. | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString()"
  },
  "api/Monarch.Commands.Lexer.Property.html": {
    "href": "api/Monarch.Commands.Lexer.Property.html",
    "title": "Class Property | Monarch API Reference",
    "keywords": "Class Property Property Info Inheritance object Property Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Monarch.Commands.Lexer Assembly: Monarch.dll Syntax public class Property Constructors | Improve this Doc View Source Property() Initializes a new instance of the Property class. Declaration public Property() Properties | Improve this Doc View Source FlagName Gets or sets the name of the flag. Declaration public TokenBaseClass? FlagName { get; set; } Property Value Type Description TokenBaseClass The name of the flag. | Improve this Doc View Source FlagValue Gets or sets the flag value. Declaration public List<TokenBaseClass> FlagValue { get; set; } Property Value Type Description List<TokenBaseClass> The flag value. | Improve this Doc View Source IsIEnumerable Gets a value indicating whether this instance is ienumerable. Declaration public bool IsIEnumerable { get; } Property Value Type Description bool true if this instance is ienumerable; otherwise, false. | Improve this Doc View Source MaxValueCount Gets the maximum value count. Declaration public int MaxValueCount { get; } Property Value Type Description int The maximum value count. | Improve this Doc View Source PropertyInfo Gets or sets the property. Declaration public PropertyInfo? PropertyInfo { get; set; } Property Value Type Description PropertyInfo The property. Methods | Improve this Doc View Source GetValue(object) Gets the value. Declaration public void GetValue(object inputObject) Parameters Type Name Description object inputObject The input object. | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString()"
  },
  "api/Monarch.Commands.Lexer.html": {
    "href": "api/Monarch.Commands.Lexer.html",
    "title": "Namespace Monarch.Commands.Lexer | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands.Lexer Classes ArgLexer Arg Lexer Command Command Property Property Info"
  },
  "api/Monarch.Commands.Parser.ArgParser.html": {
    "href": "api/Monarch.Commands.Parser.ArgParser.html",
    "title": "Class ArgParser | Monarch API Reference",
    "keywords": "Class ArgParser Arg parser Inheritance object ArgParser Implements IArgParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch.Commands.Parser Assembly: Monarch.dll Syntax public class ArgParser : IArgParser Constructors | Improve this Doc View Source ArgParser(IOptions, IEnumerable<ICommand>) Initializes a new instance of the ArgParser class. Declaration public ArgParser(IOptions options, IEnumerable<ICommand> commands) Parameters Type Name Description IOptions options The options. IEnumerable<ICommand> commands The commands. See Also IArgParser Properties | Improve this Doc View Source Commands Gets the commands. Declaration public IEnumerable<ICommand> Commands { get; } Property Value Type Description IEnumerable<ICommand> The commands. See Also IArgParser | Improve this Doc View Source Options Gets the options. Declaration public IOptions Options { get; } Property Value Type Description IOptions The options. See Also IArgParser Methods | Improve this Doc View Source GetTokens(string[]) Gets the tokens. Declaration public TokenBaseClass[] GetTokens(string[] args) Parameters Type Name Description string[] args The arguments. Returns Type Description TokenBaseClass[] Converts the args into tokens. Exceptions Type Condition ParsingException Unable to find command. See Also IArgParser Implements IArgParser See Also IArgParser"
  },
  "api/Monarch.Commands.Parser.CommandToken.html": {
    "href": "api/Monarch.Commands.Parser.CommandToken.html",
    "title": "Class CommandToken | Monarch API Reference",
    "keywords": "Class CommandToken Command token Inheritance object TokenBaseClass CommandToken Inherited Members TokenBaseClass.UpperValue TokenBaseClass.Value TokenBaseClass.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Monarch.Commands.Parser Assembly: Monarch.dll Syntax public class CommandToken : TokenBaseClass Constructors | Improve this Doc View Source CommandToken(string) Initializes a new instance of the CommandToken class. Declaration public CommandToken(string token) Parameters Type Name Description string token The token. See Also TokenBaseClass See Also TokenBaseClass"
  },
  "api/Monarch.Commands.Parser.OptionNameToken.html": {
    "href": "api/Monarch.Commands.Parser.OptionNameToken.html",
    "title": "Class OptionNameToken | Monarch API Reference",
    "keywords": "Class OptionNameToken Option name token Inheritance object TokenBaseClass OptionNameToken Inherited Members TokenBaseClass.UpperValue TokenBaseClass.Value TokenBaseClass.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Monarch.Commands.Parser Assembly: Monarch.dll Syntax public class OptionNameToken : TokenBaseClass Constructors | Improve this Doc View Source OptionNameToken(string) Initializes a new instance of the OptionNameToken class. Declaration public OptionNameToken(string value) Parameters Type Name Description string value The value. See Also TokenBaseClass See Also TokenBaseClass"
  },
  "api/Monarch.Commands.Parser.OptionValueToken.html": {
    "href": "api/Monarch.Commands.Parser.OptionValueToken.html",
    "title": "Class OptionValueToken | Monarch API Reference",
    "keywords": "Class OptionValueToken Option value token Inheritance object TokenBaseClass OptionValueToken Inherited Members TokenBaseClass.UpperValue TokenBaseClass.Value TokenBaseClass.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Monarch.Commands.Parser Assembly: Monarch.dll Syntax public class OptionValueToken : TokenBaseClass Constructors | Improve this Doc View Source OptionValueToken(string) Initializes a new instance of the OptionValueToken class. Declaration public OptionValueToken(string value) Parameters Type Name Description string value The value. See Also TokenBaseClass See Also TokenBaseClass"
  },
  "api/Monarch.Commands.Parser.TokenBaseClass.html": {
    "href": "api/Monarch.Commands.Parser.TokenBaseClass.html",
    "title": "Class TokenBaseClass | Monarch API Reference",
    "keywords": "Class TokenBaseClass Token base class Inheritance object TokenBaseClass CommandToken OptionNameToken OptionValueToken Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Monarch.Commands.Parser Assembly: Monarch.dll Syntax public abstract class TokenBaseClass Constructors | Improve this Doc View Source TokenBaseClass(string) Initializes a new instance of the TokenBaseClass class. Declaration protected TokenBaseClass(string value) Parameters Type Name Description string value The value. Exceptions Type Condition ArgumentNullException value Properties | Improve this Doc View Source UpperValue Gets the upper value. Declaration public string UpperValue { get; } Property Value Type Description string The upper value. | Improve this Doc View Source Value Gets the value. Declaration public string Value { get; } Property Value Type Description string The value. Methods | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString()"
  },
  "api/Monarch.Commands.Parser.html": {
    "href": "api/Monarch.Commands.Parser.html",
    "title": "Namespace Monarch.Commands.Parser | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands.Parser Classes ArgParser Arg parser CommandToken Command token OptionNameToken Option name token OptionValueToken Option value token TokenBaseClass Token base class"
  },
  "api/Monarch.Commands.html": {
    "href": "api/Monarch.Commands.html",
    "title": "Namespace Monarch.Commands | Monarch API Reference",
    "keywords": "Namespace Monarch.Commands Classes CommandManager Manager class."
  },
  "api/Monarch.Defaults.DefaultConsoleWriter.html": {
    "href": "api/Monarch.Defaults.DefaultConsoleWriter.html",
    "title": "Class DefaultConsoleWriter | Monarch API Reference",
    "keywords": "Class DefaultConsoleWriter Default console writer Inheritance object DefaultConsoleWriter Implements IConsoleWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch.Defaults Assembly: Monarch.dll Syntax public class DefaultConsoleWriter : IConsoleWriter Constructors | Improve this Doc View Source DefaultConsoleWriter(IEnumerable<IOptions>) Initializes a new instance of the DefaultConsoleWriter class. Declaration public DefaultConsoleWriter(IEnumerable<IOptions> options) Parameters Type Name Description IEnumerable<IOptions> options The options. See Also IConsoleWriter IConsoleWriter Properties | Improve this Doc View Source ConsoleWidth Gets the width of the console. Declaration public int ConsoleWidth { get; } Property Value Type Description int The width of the console. See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source CurrentIndent Gets the current indent. Declaration public int CurrentIndent { get; } Property Value Type Description int The current indent. See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Separator Gets the separator. Declaration public string Separator { get; } Property Value Type Description string The separator. See Also IConsoleWriter IConsoleWriter Methods | Improve this Doc View Source Indent() Indents this instance. Declaration public IConsoleWriter Indent() Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Outdent() Outdents this instance. Declaration public IConsoleWriter Outdent() Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source ResetConsoleColor() Resets the color of the console. Declaration public IConsoleWriter ResetConsoleColor() Returns Type Description IConsoleWriter This. See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source SetConsoleColor(ConsoleColor) Sets the color of the console. Declaration public IConsoleWriter SetConsoleColor(ConsoleColor color) Parameters Type Name Description ConsoleColor color The color. Returns Type Description IConsoleWriter This. See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Write(bool) Writes the value and ends with a new line. Declaration public IConsoleWriter Write(bool value) Parameters Type Name Description bool value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Write(char) Writes the value and ends with a new line. Declaration public IConsoleWriter Write(char value) Parameters Type Name Description char value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Write(char[]) Writes the value and ends with a new line. Declaration public IConsoleWriter Write(char[] value) Parameters Type Name Description char[] value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Write(decimal) Writes the value and ends with a new line. Declaration public IConsoleWriter Write(decimal value) Parameters Type Name Description decimal value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Write(double) Writes the value and ends with a new line. Declaration public IConsoleWriter Write(double value) Parameters Type Name Description double value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Write(int) Writes the value and ends with a new line. Declaration public IConsoleWriter Write(int value) Parameters Type Name Description int value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Write(long) Writes the value and ends with a new line. Declaration public IConsoleWriter Write(long value) Parameters Type Name Description long value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Write(object) Writes the value and ends with a new line. Declaration public IConsoleWriter Write(object value) Parameters Type Name Description object value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Write(float) Writes the value and ends with a new line. Declaration public IConsoleWriter Write(float value) Parameters Type Name Description float value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Write(string) Writes the text and ends with a new line. Declaration public IConsoleWriter Write(string value) Parameters Type Name Description string value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Write(uint) Writes the value and ends with a new line. Declaration public IConsoleWriter Write(uint value) Parameters Type Name Description uint value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source Write(ulong) Writes the value and ends with a new line. Declaration public IConsoleWriter Write(ulong value) Parameters Type Name Description ulong value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine() Writes a new line. Declaration public IConsoleWriter WriteLine() Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine(bool) Writes the value and ends with a new line. Declaration public IConsoleWriter WriteLine(bool value) Parameters Type Name Description bool value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine(char) Writes the value and ends with a new line. Declaration public IConsoleWriter WriteLine(char value) Parameters Type Name Description char value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine(char[]) Writes the value and ends with a new line. Declaration public IConsoleWriter WriteLine(char[] value) Parameters Type Name Description char[] value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine(decimal) Writes the value and ends with a new line. Declaration public IConsoleWriter WriteLine(decimal value) Parameters Type Name Description decimal value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine(double) Writes the value and ends with a new line. Declaration public IConsoleWriter WriteLine(double value) Parameters Type Name Description double value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine(int) Writes the value and ends with a new line. Declaration public IConsoleWriter WriteLine(int value) Parameters Type Name Description int value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine(long) Writes the value and ends with a new line. Declaration public IConsoleWriter WriteLine(long value) Parameters Type Name Description long value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine(object) Writes the value and ends with a new line. Declaration public IConsoleWriter WriteLine(object value) Parameters Type Name Description object value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine(float) Writes the value and ends with a new line. Declaration public IConsoleWriter WriteLine(float value) Parameters Type Name Description float value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine(string) Writes the text and ends with a new line. Declaration public IConsoleWriter WriteLine(string value) Parameters Type Name Description string value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine(uint) Writes the value and ends with a new line. Declaration public IConsoleWriter WriteLine(uint value) Parameters Type Name Description uint value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteLine(ulong) Writes the value and ends with a new line. Declaration public IConsoleWriter WriteLine(ulong value) Parameters Type Name Description ulong value The value. Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter | Improve this Doc View Source WriteSeparator() Writes the separator. Declaration public IConsoleWriter WriteSeparator() Returns Type Description IConsoleWriter This See Also IConsoleWriter IConsoleWriter Implements IConsoleWriter See Also IConsoleWriter IConsoleWriter"
  },
  "api/Monarch.Defaults.DefaultOptions.html": {
    "href": "api/Monarch.Defaults.DefaultOptions.html",
    "title": "Class DefaultOptions | Monarch API Reference",
    "keywords": "Class DefaultOptions Default options Inheritance object DefaultOptions Implements IOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Monarch.Defaults Assembly: Monarch.dll Syntax public class DefaultOptions : IOptions Properties | Improve this Doc View Source CommandPrefix Gets the command prefix. Declaration public string CommandPrefix { get; } Property Value Type Description string The command prefix. See Also IOptions | Improve this Doc View Source FlagPrefix Gets the flag prefix. Declaration public string FlagPrefix { get; } Property Value Type Description string The flag prefix. See Also IOptions | Improve this Doc View Source IndentAmount Gets the indent amount. Declaration public int IndentAmount { get; } Property Value Type Description int The indent amount. See Also IOptions Implements IOptions See Also IOptions"
  },
  "api/Monarch.Defaults.html": {
    "href": "api/Monarch.Defaults.html",
    "title": "Namespace Monarch.Defaults | Monarch API Reference",
    "keywords": "Namespace Monarch.Defaults Classes DefaultConsoleWriter Default console writer DefaultOptions Default options"
  },
  "api/Monarch.Exceptions.ParsingException.html": {
    "href": "api/Monarch.Exceptions.ParsingException.html",
    "title": "Class ParsingException | Monarch API Reference",
    "keywords": "Class ParsingException Parsing exception Inheritance object Exception ParsingException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Monarch.Exceptions Assembly: Monarch.dll Syntax public class ParsingException : Exception, ISerializable Constructors | Improve this Doc View Source ParsingException() Initializes a new instance of the ParsingException class. Declaration public ParsingException() See Also Exception | Improve this Doc View Source ParsingException(SerializationInfo, StreamingContext) Initializes a new instance of the ParsingException class. Declaration protected ParsingException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. See Also Exception | Improve this Doc View Source ParsingException(string) Initializes a new instance of the ParsingException class. Declaration public ParsingException(string message) Parameters Type Name Description string message The message that describes the error. See Also Exception | Improve this Doc View Source ParsingException(string, Exception) Initializes a new instance of the ParsingException class. Declaration public ParsingException(string message, Exception innerException) Parameters Type Name Description string message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. See Also Exception Implements ISerializable See Also Exception"
  },
  "api/Monarch.Exceptions.html": {
    "href": "api/Monarch.Exceptions.html",
    "title": "Namespace Monarch.Exceptions | Monarch API Reference",
    "keywords": "Namespace Monarch.Exceptions Classes ParsingException Parsing exception"
  },
  "api/Monarch.Interfaces.IConsoleWriter.html": {
    "href": "api/Monarch.Interfaces.IConsoleWriter.html",
    "title": "Interface IConsoleWriter | Monarch API Reference",
    "keywords": "Interface IConsoleWriter Console writer Namespace: Monarch.Interfaces Assembly: Monarch.dll Syntax public interface IConsoleWriter Methods | Improve this Doc View Source Indent() Indents this instance. Declaration IConsoleWriter Indent() Returns Type Description IConsoleWriter This | Improve this Doc View Source Outdent() Outdents this instance. Declaration IConsoleWriter Outdent() Returns Type Description IConsoleWriter This | Improve this Doc View Source ResetConsoleColor() Resets the color of the console. Declaration IConsoleWriter ResetConsoleColor() Returns Type Description IConsoleWriter This | Improve this Doc View Source SetConsoleColor(ConsoleColor) Sets the color of the console. Declaration IConsoleWriter SetConsoleColor(ConsoleColor color) Parameters Type Name Description ConsoleColor color The color. Returns Type Description IConsoleWriter This | Improve this Doc View Source Write(bool) Writes the value. Declaration IConsoleWriter Write(bool value) Parameters Type Name Description bool value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source Write(char) Writes the value. Declaration IConsoleWriter Write(char value) Parameters Type Name Description char value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source Write(char[]) Writes the value. Declaration IConsoleWriter Write(char[] value) Parameters Type Name Description char[] value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source Write(decimal) Writes the value. Declaration IConsoleWriter Write(decimal value) Parameters Type Name Description decimal value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source Write(double) Writes the value. Declaration IConsoleWriter Write(double value) Parameters Type Name Description double value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source Write(int) Writes the value. Declaration IConsoleWriter Write(int value) Parameters Type Name Description int value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source Write(long) Writes the value. Declaration IConsoleWriter Write(long value) Parameters Type Name Description long value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source Write(object) Writes the value. Declaration IConsoleWriter Write(object value) Parameters Type Name Description object value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source Write(float) Writes the value. Declaration IConsoleWriter Write(float value) Parameters Type Name Description float value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source Write(string) Writes the value. Declaration IConsoleWriter Write(string value) Parameters Type Name Description string value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source Write(uint) Writes the value. Declaration IConsoleWriter Write(uint value) Parameters Type Name Description uint value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source Write(ulong) Writes the value. Declaration IConsoleWriter Write(ulong value) Parameters Type Name Description ulong value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine() Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine() Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine(bool) Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine(bool value) Parameters Type Name Description bool value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine(char) Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine(char value) Parameters Type Name Description char value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine(char[]) Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine(char[] value) Parameters Type Name Description char[] value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine(decimal) Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine(decimal value) Parameters Type Name Description decimal value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine(double) Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine(double value) Parameters Type Name Description double value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine(int) Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine(int value) Parameters Type Name Description int value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine(long) Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine(long value) Parameters Type Name Description long value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine(object) Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine(object value) Parameters Type Name Description object value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine(float) Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine(float value) Parameters Type Name Description float value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine(string) Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine(string value) Parameters Type Name Description string value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine(uint) Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine(uint value) Parameters Type Name Description uint value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteLine(ulong) Writes the text and ends with a new line. Declaration IConsoleWriter WriteLine(ulong value) Parameters Type Name Description ulong value The value. Returns Type Description IConsoleWriter This | Improve this Doc View Source WriteSeparator() Writes the separator. Declaration IConsoleWriter WriteSeparator() Returns Type Description IConsoleWriter This"
  },
  "api/Monarch.Interfaces.IOptions.html": {
    "href": "api/Monarch.Interfaces.IOptions.html",
    "title": "Interface IOptions | Monarch API Reference",
    "keywords": "Interface IOptions Options interface Namespace: Monarch.Interfaces Assembly: Monarch.dll Syntax public interface IOptions Properties | Improve this Doc View Source CommandPrefix Gets the command prefix. Declaration string CommandPrefix { get; } Property Value Type Description string The command prefix. | Improve this Doc View Source FlagPrefix Gets the flag prefix. Declaration string FlagPrefix { get; } Property Value Type Description string The flag prefix. | Improve this Doc View Source IndentAmount Gets the indent amount. Declaration int IndentAmount { get; } Property Value Type Description int The indent amount."
  },
  "api/Monarch.Interfaces.html": {
    "href": "api/Monarch.Interfaces.html",
    "title": "Namespace Monarch.Interfaces | Monarch API Reference",
    "keywords": "Namespace Monarch.Interfaces Interfaces IConsoleWriter Console writer IOptions Options interface"
  },
  "api/Monarch.html": {
    "href": "api/Monarch.html",
    "title": "Namespace Monarch | Monarch API Reference",
    "keywords": "Namespace Monarch Classes CommandRunner Command runner"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Monarch API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Program Code | Monarch API Reference",
    "keywords": "Program Code using Microsoft.Extensions.DependencyInjection; using Monarch; namespace ExampleApp { internal class Program { private static void Main(string[] args) { new ServiceCollection().AddCanisterModules(); new ServiceCollection().AddCanisterModules().BuildServiceProvider().GetService<CommandRunner>().Run(args); } } } Command Code using BigBook; using Microsoft.Extensions.DependencyInjection; using Monarch.Commands.Attributes; using Monarch.Commands.BaseClasses; using System; using System.Reflection; using System.Threading.Tasks; namespace ExampleApp { /// <summary> /// Example command available to the user to run from the command line /// </summary> /// <seealso cref=\"CommandBaseClass&lt;ExampleInput&gt;\" /> public class ExampleCommand1 : CommandBaseClass<ExampleInput> { /// <summary> /// Gets the aliases. These are the names that can be used to call the command. /// </summary> /// <value> /// The aliases. /// </value> public override string[] Aliases { get; } = new[] { \"Example1\" }; /// <summary> /// Gets the description. This is what is displayed when the user calls the help command. /// </summary> /// <value> /// The description. /// </value> public override string Description { get; } = \"Example command.\"; /// <summary> /// Gets the name. This is the name of the command. /// </summary> /// <value> /// The name. /// </value> public override string Name { get; } = \"Example Command 1\"; /// <summary> /// Runs the specified input. This is where the command does its work. /// </summary> /// <param name=\"input\">The input.</param> /// <returns> /// The result. /// </returns> protected override Task<int> Run(ExampleInput input) { Console.WriteLine(input.ExampleEnum); return Task.FromResult(0); } } /// <summary> /// Example input for the command. /// </summary> public class ExampleInput { /// <summary> /// Gets or sets the example enum. This is an example of an enum input. /// </summary> /// <value> /// The example enum. /// </value> public ExampleEnum ExampleEnum { get; set; } /// <summary> /// Gets or sets the name value. This is an example of a string input. The <see cref=\"DynamicDisplayAttribute\"/> is used to display the current assemblies loaded. /// </summary> /// <value> /// The name value. /// </value> [DynamicDisplay(typeof(NameValueDisplay))] public string NameValue { get; set; } } /// <summary> /// Used to display the current assemblies loaded. /// </summary> internal class NameValueDisplay { /// <summary> /// Converts to string. /// </summary> /// <returns> /// A <see cref=\"System.String\" /> that represents this instance. /// </returns> public override string ToString() { return \"Assemblies currently loaded: \" + new ServiceCollection().AddCanisterModules().BuildServiceProvider().GetServices<Assembly>().ToString(x => x.GetName().Name); } } /// <summary> /// Example enum for the possible values /// </summary> public enum ExampleEnum { /// <summary> /// The value1 /// </summary> Value1, /// <summary> /// The value2 /// </summary> Value2, /// <summary> /// The value3 /// </summary> Value3 } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Monarch | Monarch API Reference",
    "keywords": "Monarch Monarch is a command line parser/task runner. Basic Usage In order to use the system, you need to register it with your ServiceCollection: serviceCollection.AddCanisterModules(); This is required prior to using the Monarch class for the first time. Once it is wired up, you can use the CommandRunner class: var Instance = new CommandRunner(); return Instance.Run(args); The CommandRunner class has a Run method which parses the args passed in and runs the appropriate command. The library has help and version commands built in to the system, however to create your own commands you need to create a command and also an input class: public class TestCommand : CommandBaseClass<TestInput> { public override string[] Aliases => new string[] { \"Test\" }; public override string Description => \"Test command\"; public override string Name => \"Test Command\"; protected override async Task<int> Run(TestInput input) { await Task.CompletedTask; Console.WriteLine(input.Value1); Console.WriteLine(input.Value2); Console.WriteLine(input.Value3.ToString(x => x)); return 0; } } public class TestInput { [Display(Description = \"Value 1 Property\")] public int Value1 { get; set; } [Display(Description = \"Value 2 Property\")] public string Value2 { get; set; } [Display(Description = \"Value 3 Property\")] [MaxLength(3)] public List<string> Value3 { get; set; } } The command above inherits from the CommandBaseClass and defines the input that it expects. In this case TestInput. TestInput is how the command line arguments should be parsed by the system. The commands must define the aliases, description, and name for the command. The TestInput then defines properties and uses the DisplayAttribute from the System.ComponentModel.DataAnnotations namespace to define information. Also any data annotations defining max length, required, etc. are used to validate the input. Options By default the system does not require you to set options. However you can specify some options found within the system including command prefix, flag prefix, and indentation amount. In order to override what is in the system just create a class that inherits from IOptions: public class DefaultOptions : IOptions { /// <summary> /// Gets the command prefix. /// </summary> /// <value>The command prefix.</value> public string CommandPrefix { get; } = \"\"; /// <summary> /// Gets the flag prefix. /// </summary> /// <value>The flag prefix.</value> public string FlagPrefix { get; } = \"-\"; /// <summary> /// Gets the indent amount. /// </summary> /// <value>The indent amount.</value> public int IndentAmount { get; } = 4; }"
  }
}